syntax = "proto3";
package models;

option go_package = "../../models";

message RequestVoteArgs {
    int32  Term =1;
    string  CandidateId=2;
    int32 LastLogIndex=3;
    int32 LastLogTerm =4;
    string  Type=5;
}

message RequestVoteReply{
    int32 Term=1;
    bool VoteReply=2;
}
message AppendEntriesArgs{
    int32 Term=1;//领导人的任期
    string LeaderId=2;//领导人 ID 因此跟随者可以对客户端进行重定向（译者注：跟随者根据领导人 ID 把客户端的请求重定向到领导人，比如有时客户端把请求发给了跟随者而不是领导人）
    int32 PrevLogIndex=3;//紧邻新日志条目之前的那个日志条目的索引
    int32 PrevLogTerm=4;//紧邻新日志条目之前的那个日志条目的任期
    repeated LogEntry Entries=5;//需要被保存的日志条目（被当做心跳使用时，则日志条目内容为空；为了提高效率可能一次性发送多个）
    int32   LeaderCommit=6;//领导人的已知已提交的最高的日志条目的索引
}
message LogEntry{
    Command  Command=1;
    int32 Term=2;
    int32 Index=3;
}
message Command{
    string Type=1;
    string Key=2;
    string Value=3;
    int32 Id=4;
    int32 TimeDuration=5;
}
message AppendEntriesReply{
    int32 Term=1;//当前任期，对于领导人而言 它会更新自己的任期
    bool success=2;	//如果跟随者所含有的条目和 prevLogIndex 以及 prevLogTerm 匹配上了，则为 true
}
message AppendCommandArgs{
    Command Command=1;
}
message AppendCommandReply{
    bool IsReceive=1;
}
message GetKeyArgs{
    string Key=1;
}
message GetKeyReply{
    string Value=1;
    bool IsOk=2;
}
message SnapArgs{
    bytes data=1;
}
message SnapReply{
    bool IsAccept=1;
}
service RaftRPC{
    rpc RequestVote(RequestVoteArgs) returns (RequestVoteReply);
    rpc AppendEntries(AppendEntriesArgs) returns(AppendEntriesReply);
    rpc AppendCommand(AppendCommandArgs) returns (AppendCommandReply);
    rpc GetKey(GetKeyArgs)returns (GetKeyReply);
    rpc SendSnap(SnapArgs)returns (SnapReply);
}

