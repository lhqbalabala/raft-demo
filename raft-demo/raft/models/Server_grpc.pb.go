// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.20.3
// source: Server.proto

package models

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RaftRPCClient is the client API for RaftRPC service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RaftRPCClient interface {
	RequestVote(ctx context.Context, in *RequestVoteArgs, opts ...grpc.CallOption) (*RequestVoteReply, error)
	AppendEntries(ctx context.Context, in *AppendEntriesArgs, opts ...grpc.CallOption) (*AppendEntriesReply, error)
	AppendCommand(ctx context.Context, in *AppendCommandArgs, opts ...grpc.CallOption) (*AppendCommandReply, error)
	GetKey(ctx context.Context, in *GetKeyArgs, opts ...grpc.CallOption) (*GetKeyReply, error)
	SendSnap(ctx context.Context, in *SnapArgs, opts ...grpc.CallOption) (*SnapReply, error)
}

type raftRPCClient struct {
	cc grpc.ClientConnInterface
}

func NewRaftRPCClient(cc grpc.ClientConnInterface) RaftRPCClient {
	return &raftRPCClient{cc}
}

func (c *raftRPCClient) RequestVote(ctx context.Context, in *RequestVoteArgs, opts ...grpc.CallOption) (*RequestVoteReply, error) {
	out := new(RequestVoteReply)
	err := c.cc.Invoke(ctx, "/models.RaftRPC/RequestVote", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *raftRPCClient) AppendEntries(ctx context.Context, in *AppendEntriesArgs, opts ...grpc.CallOption) (*AppendEntriesReply, error) {
	out := new(AppendEntriesReply)
	err := c.cc.Invoke(ctx, "/models.RaftRPC/AppendEntries", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *raftRPCClient) AppendCommand(ctx context.Context, in *AppendCommandArgs, opts ...grpc.CallOption) (*AppendCommandReply, error) {
	out := new(AppendCommandReply)
	err := c.cc.Invoke(ctx, "/models.RaftRPC/AppendCommand", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *raftRPCClient) GetKey(ctx context.Context, in *GetKeyArgs, opts ...grpc.CallOption) (*GetKeyReply, error) {
	out := new(GetKeyReply)
	err := c.cc.Invoke(ctx, "/models.RaftRPC/GetKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *raftRPCClient) SendSnap(ctx context.Context, in *SnapArgs, opts ...grpc.CallOption) (*SnapReply, error) {
	out := new(SnapReply)
	err := c.cc.Invoke(ctx, "/models.RaftRPC/SendSnap", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RaftRPCServer is the server API for RaftRPC service.
// All implementations must embed UnimplementedRaftRPCServer
// for forward compatibility
type RaftRPCServer interface {
	RequestVote(context.Context, *RequestVoteArgs) (*RequestVoteReply, error)
	AppendEntries(context.Context, *AppendEntriesArgs) (*AppendEntriesReply, error)
	AppendCommand(context.Context, *AppendCommandArgs) (*AppendCommandReply, error)
	GetKey(context.Context, *GetKeyArgs) (*GetKeyReply, error)
	SendSnap(context.Context, *SnapArgs) (*SnapReply, error)
	mustEmbedUnimplementedRaftRPCServer()
}

// UnimplementedRaftRPCServer must be embedded to have forward compatible implementations.
type UnimplementedRaftRPCServer struct {
}

func (UnimplementedRaftRPCServer) RequestVote(context.Context, *RequestVoteArgs) (*RequestVoteReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestVote not implemented")
}
func (UnimplementedRaftRPCServer) AppendEntries(context.Context, *AppendEntriesArgs) (*AppendEntriesReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AppendEntries not implemented")
}
func (UnimplementedRaftRPCServer) AppendCommand(context.Context, *AppendCommandArgs) (*AppendCommandReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AppendCommand not implemented")
}
func (UnimplementedRaftRPCServer) GetKey(context.Context, *GetKeyArgs) (*GetKeyReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetKey not implemented")
}
func (UnimplementedRaftRPCServer) SendSnap(context.Context, *SnapArgs) (*SnapReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendSnap not implemented")
}
func (UnimplementedRaftRPCServer) mustEmbedUnimplementedRaftRPCServer() {}

// UnsafeRaftRPCServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RaftRPCServer will
// result in compilation errors.
type UnsafeRaftRPCServer interface {
	mustEmbedUnimplementedRaftRPCServer()
}

func RegisterRaftRPCServer(s grpc.ServiceRegistrar, srv RaftRPCServer) {
	s.RegisterService(&RaftRPC_ServiceDesc, srv)
}

func _RaftRPC_RequestVote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestVoteArgs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RaftRPCServer).RequestVote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/models.RaftRPC/RequestVote",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RaftRPCServer).RequestVote(ctx, req.(*RequestVoteArgs))
	}
	return interceptor(ctx, in, info, handler)
}

func _RaftRPC_AppendEntries_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppendEntriesArgs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RaftRPCServer).AppendEntries(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/models.RaftRPC/AppendEntries",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RaftRPCServer).AppendEntries(ctx, req.(*AppendEntriesArgs))
	}
	return interceptor(ctx, in, info, handler)
}

func _RaftRPC_AppendCommand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppendCommandArgs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RaftRPCServer).AppendCommand(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/models.RaftRPC/AppendCommand",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RaftRPCServer).AppendCommand(ctx, req.(*AppendCommandArgs))
	}
	return interceptor(ctx, in, info, handler)
}

func _RaftRPC_GetKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetKeyArgs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RaftRPCServer).GetKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/models.RaftRPC/GetKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RaftRPCServer).GetKey(ctx, req.(*GetKeyArgs))
	}
	return interceptor(ctx, in, info, handler)
}

func _RaftRPC_SendSnap_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SnapArgs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RaftRPCServer).SendSnap(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/models.RaftRPC/SendSnap",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RaftRPCServer).SendSnap(ctx, req.(*SnapArgs))
	}
	return interceptor(ctx, in, info, handler)
}

// RaftRPC_ServiceDesc is the grpc.ServiceDesc for RaftRPC service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RaftRPC_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "models.RaftRPC",
	HandlerType: (*RaftRPCServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RequestVote",
			Handler:    _RaftRPC_RequestVote_Handler,
		},
		{
			MethodName: "AppendEntries",
			Handler:    _RaftRPC_AppendEntries_Handler,
		},
		{
			MethodName: "AppendCommand",
			Handler:    _RaftRPC_AppendCommand_Handler,
		},
		{
			MethodName: "GetKey",
			Handler:    _RaftRPC_GetKey_Handler,
		},
		{
			MethodName: "SendSnap",
			Handler:    _RaftRPC_SendSnap_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "Server.proto",
}
